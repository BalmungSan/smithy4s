"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[8],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var p=2;p<l;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6457:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var i=n(7462),r=n(3366),l=(n(7294),n(3905)),a=["components"],o={sidebar_label:"Deriving CLIs",title:"Deriving CLIs"},s=void 0,p={unversionedId:"protocols/deriving-cli",id:"protocols/deriving-cli",title:"Deriving CLIs",description:"- The Smithy4s Decline module provides the capability to derive a Decline Cli for your service.",source:"@site/../docs/target/jvm-2.13/mdoc/03-protocols/04-deriving-cli.md",sourceDirName:"03-protocols",slug:"/protocols/deriving-cli",permalink:"/smithy4s/docs/protocols/deriving-cli",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/03-protocols/04-deriving-cli.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Deriving CLIs",title:"Deriving CLIs"},sidebar:"tutorialSidebar",previous:{title:"AWS",permalink:"/smithy4s/docs/protocols/aws/aws"},next:{title:"Customisation",permalink:"/smithy4s/docs/codegen/customisation"}},u={},c=[],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,l.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The Smithy4s Decline module provides the capability to derive a ",(0,l.kt)("a",{parentName:"li",href:"https://ben.kirw.in/decline/"},"Decline")," Cli for your service."),(0,l.kt)("li",{parentName:"ul"},"The cli generated will be in the form of a ",(0,l.kt)("a",{parentName:"li",href:"https://ben.kirw.in/decline/effect.html"},"CommandIOApp")," "),(0,l.kt)("li",{parentName:"ul"},"Let's revisit our HelloWorld smithy definition from the ",(0,l.kt)("a",{parentName:"li",href:"/smithy4s/docs/overview/quickstart"},"Quickstart"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace smithy4s.hello\n\nuse smithy4s.api#simpleRestJson\n\n@simpleRestJson\nservice HelloWorldService {\n  version: "1.0.0",\n  operations: [Hello]\n}\n\n@http(method: "POST", uri: "/{name}", code: 200)\noperation Hello {\n  input: Person,\n  output: Greeting\n}\n\nstructure Person {\n  @httpLabel\n  @required\n  name: String,\n\n  @httpQuery("town")\n  town: String\n}\n\nstructure Greeting {\n  @required\n  message: String\n}\n')),(0,l.kt)("p",null,"Lets implement the HelloWorld service"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object HelloWorldServiceInstance{\n  val simple = new HelloWorldService[IO]{\n    def hello(name: String, town: Option[String]):IO[Greeting] = {\n      IO{\n        Greeting(s"hello $name , who hails from $town")\n      }\n    }\n  }\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Now Using the ",(0,l.kt)("inlineCode",{parentName:"li"},"decline")," module from Smithy4s we can wrap the service instance in an instance of a ",(0,l.kt)("inlineCode",{parentName:"li"},"Smithy4sCli"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"Smithy4sCli")," allows the customization of the Opts and stdin/stdout/stderr handling "))),(0,l.kt)("li",{parentName:"ul"},"There is a convenient class ",(0,l.kt)("inlineCode",{parentName:"li"},"Smithy4sSimpleStandaloneCli")," that you can extend and simply pass in the service wrapped in an Opts ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"object Hello extends standalone.Smithy4sSimpleStandaloneCli(Opts(HelloWorldServiceInstance.simple))")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Hello")," is now a runnable ",(0,l.kt)("inlineCode",{parentName:"li"},"CommandIOApp")," and will provide the following interface")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," Usage: hello-world-service hello [--output <output>] <name> [<town>]\n HTTP POST /{name}\n Options and flags:\n     --help\n         Display this help text.\n     --output <output>\n         Output mode\n")),(0,l.kt)("h1",{id:"smithy-to-decline-mappings"},"Smithy to Decline mappings"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The Service name will be used to generate the top level Command",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All operations will be mapped to subcommands"))),(0,l.kt)("li",{parentName:"ul"},"The Input structure is flattened to top level fields with no nesting",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"All Primitives are mapped to a Positional ",(0,l.kt)("inlineCode",{parentName:"li"},"decline")," Argument , with the following exceptions.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Boolean fields are mapped to a ",(0,l.kt)("inlineCode",{parentName:"li"},"decline")," Flag"),(0,l.kt)("li",{parentName:"ul"},"Blobs are mapped to take in either stdin(by passing in ",(0,l.kt)("inlineCode",{parentName:"li"},"-")," ) or a full file path and will produce a Byte array "),(0,l.kt)("li",{parentName:"ul"},"Timestamps are parsed using TimestampFormat.DATE_TIME by default, but @timestampFormat can be used to customize that."))),(0,l.kt)("li",{parentName:"ul"},"Lists and recursive types",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"a top level list is converted to a repeated positional argument (or flag in case of Boolean)"),(0,l.kt)("li",{parentName:"ul"},"All recursive types expect json to be passed in."))),(0,l.kt)("li",{parentName:"ul"},"How is Nesting handled",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"all nested fields are converted to Options "),(0,l.kt)("li",{parentName:"ul"},"a nested list is converted to expect a json i.e. List","[String]"," would expect ",(0,l.kt)("inlineCode",{parentName:"li"},'\'["foo","baz","qux"]\'')," as a decline Option",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"when the nested list contains blobs , it will expect a json of base64 encoded strings "))))))),(0,l.kt)("li",{parentName:"ul"},"Help",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Documentation is added to every field, operation and service - if available. For HTTP operations a path template is provided as well.")))),(0,l.kt)("h1",{id:"missing-features"},"Missing Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Collision Handling for un-nesting of nested fields")))}d.isMDXComponent=!0}}]);