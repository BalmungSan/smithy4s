"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[343],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6382:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"ADTs",title:"Algebraic data types"},l=void 0,d={unversionedId:"codegen/customisation/adts",id:"codegen/customisation/adts",title:"Algebraic data types",description:"The default behavior of Smithy4s when rendering unions that target structures is to render the structure",source:"@site/../docs/target/jvm-2.13/mdoc/04-codegen/01-customisation/02-adts.md",sourceDirName:"04-codegen/01-customisation",slug:"/codegen/customisation/adts",permalink:"/smithy4s/docs/codegen/customisation/adts",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/04-codegen/01-customisation/02-adts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"ADTs",title:"Algebraic data types"},sidebar:"tutorialSidebar",previous:{title:"Packed inputs",permalink:"/smithy4s/docs/codegen/customisation/packed-inputs"},next:{title:"Collections",permalink:"/smithy4s/docs/codegen/customisation/collections"}},c={},u=[],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The default behavior of Smithy4s when rendering unions that target structures is to render the structure\nin a separate file from the union that targets it. This makes sense if the structure is used in other\ncontexts other than the union. However, it also causes an extra level of nesting within the union.\nThis is because the union will create another case class to contain your structure case class."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"union OrderType {\n  inStore: InStoreOrder\n}\n\nstructure InStoreOrder {\n    @required\n    id: OrderNumber\n    locationId: String\n}\n")),(0,i.kt)("p",null,"Would render the following scala code:"),(0,i.kt)("p",null,"OrderType.scala:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait OrderType extends scala.Product with scala.Serializable\ncase class InStoreCase(inStore: InStoreOrder) extends OrderType\n")),(0,i.kt)("p",null,"InStoreOrder.scala:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"case class InStoreOrder(id: OrderNumber, locationId: Option[String] = None)\n")),(0,i.kt)("p",null,"The sealed hierarchy ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderType")," has a member named ",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreCase"),". This is because\n",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreOrder")," is rendered in a separate file and ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderType")," is sealed."),(0,i.kt)("p",null,"However, adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"adtMember")," trait to the ",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreOrder")," structure changes this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"union OrderType {\n  inStore: InStoreOrder\n}\n\n@adtMember(OrderType) // added the adtMember trait here\nstructure InStoreOrder {\n    @required\n    id: OrderNumber\n    locationId: String\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait OrderType extends scala.Product with scala.Serializable\ncase class InStoreOrder(id: OrderNumber, locationId: Option[String] = None) extends OrderType\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"IsStoreOrder")," class has now been updated to be rendered directly as a member of the ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderType"),"\nsealed hierarchy."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The ",(0,i.kt)("inlineCode",{parentName:"em"},"adtMember")," trait can be applied to any structure as long as said structure is targeted by EXACTLY ONE union."),"\nThis means it must be targeted by the union that is provided as parameter to the adtMember trait.\nThis constraint is fulfilled above because ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderType")," targets ",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreOrder")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreOrder")," is\nannotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"@adtMember(OrderType)"),".\nThe structure annotated with ",(0,i.kt)("inlineCode",{parentName:"p"},"adtMember")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"InStoreOrder"),") also must not be targeted by any other\nstructures or unions in the model. There is a validator that will make sure these requirements are met\nwhenever the ",(0,i.kt)("inlineCode",{parentName:"p"},"adtMember")," trait is in use."),(0,i.kt)("p",null,"Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"adtMember")," trait has NO impact on the serialization/deserialization behaviors of Smithy4s.\nThe only thing it changes is what the generated code looks like. This is accomplished by keeping the\nrendered schemas equivalent, even if the case class is rendered in a different place."))}m.isMDXComponent=!0}}]);