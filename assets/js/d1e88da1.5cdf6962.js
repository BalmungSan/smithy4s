"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[531],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2121:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"Smithy IDL",title:"The Smithy IDL"},l=void 0,p={unversionedId:"the-smithy-idl/smithy-idl",id:"the-smithy-idl/smithy-idl",title:"The Smithy IDL",description:"Smithy is a protocol agnostic definition language. It means that it is not tied to any transport or application protocol or serialisation mechanism, be that http, websockets, json, protobuf, etc.",source:"@site/../docs/target/jvm-2.13/mdoc/02-the-smithy-idl/01-smithy-idl.md",sourceDirName:"02-the-smithy-idl",slug:"/the-smithy-idl/smithy-idl",permalink:"/smithy4s/docs/the-smithy-idl/smithy-idl",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/02-the-smithy-idl/01-smithy-idl.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Smithy IDL",title:"The Smithy IDL"},sidebar:"tutorialSidebar",previous:{title:"Stubbed implementations",permalink:"/smithy4s/docs/overview/stubs"},next:{title:"Smithy traits",permalink:"/smithy4s/docs/the-smithy-idl/traits"}},u={},m=[{value:"The smithy metamodel",id:"the-smithy-metamodel",level:2},{value:"Primitive types",id:"primitive-types",level:3},{value:"Named primitives",id:"named-primitives",level:3},{value:"Collection types",id:"collection-types",level:3},{value:"Enums",id:"enums",level:3},{value:"Structures",id:"structures",level:3},{value:"Unions",id:"unions",level:3},{value:"Operations and services",id:"operations-and-services",level:3},{value:"Operations",id:"operations",level:4},{value:"Errors",id:"errors",level:4},{value:"Services",id:"services",level:4},{value:"Currently <strong>not</strong> supported (in particular)",id:"currently-not-supported-in-particular",level:3}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://awslabs.github.io/smithy/"},"Smithy")," is a protocol agnostic definition language. It means that it is not tied to any transport or application protocol or serialisation mechanism, be that http, websockets, json, protobuf, etc."),(0,i.kt)("p",null,"In order to achieve this, whilst still being useful, smithy separates its core semantics from protocol-level concerns."),(0,i.kt)("p",null,"The core semantics contain means to concisely and simply express data models, as well as operations and services."),(0,i.kt)("p",null,'The protocol level semantics are provided by means of an annotation mechanism. Some annotations are provided with the smithy language out of the box, in a "standard library" called prelude, but users are free to define their own.'),(0,i.kt)("p",null,"Annotations are called ",(0,i.kt)("inlineCode",{parentName:"p"},"traits")," in smithy."),(0,i.kt)("h2",{id:"the-smithy-metamodel"},"The smithy metamodel"),(0,i.kt)("p",null,"In this section, we'll list various available ",(0,i.kt)("a",{parentName:"p",href:"https://awslabs.github.io/smithy/quickstart.html#shapes-and-traits"},"shapes")," that let you define data and operations in smithy, and how they translate in the Scala code generated by Smithy4s."),(0,i.kt)("h3",{id:"primitive-types"},"Primitive types"),(0,i.kt)("p",null,'Smithy provides the following "primitive" types out of the box.'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Boolean"),(0,i.kt)("li",{parentName:"ul"},"String"),(0,i.kt)("li",{parentName:"ul"},"Integer"),(0,i.kt)("li",{parentName:"ul"},"Long"),(0,i.kt)("li",{parentName:"ul"},"Float"),(0,i.kt)("li",{parentName:"ul"},"Short"),(0,i.kt)("li",{parentName:"ul"},"Double"),(0,i.kt)("li",{parentName:"ul"},"Byte"),(0,i.kt)("li",{parentName:"ul"},"BigInteger"),(0,i.kt)("li",{parentName:"ul"},"BigDecimal"),(0,i.kt)("li",{parentName:"ul"},"Blob (",(0,i.kt)("inlineCode",{parentName:"li"},"smithy4s.ByteArray"),", wrapper to ",(0,i.kt)("inlineCode",{parentName:"li"},"Array[Byte]"),")"),(0,i.kt)("li",{parentName:"ul"},"Timestamp (",(0,i.kt)("inlineCode",{parentName:"li"},"smithy4s.Timestamp"),", translated from/to java or javascript time types)"),(0,i.kt)("li",{parentName:"ul"},"Document (",(0,i.kt)("inlineCode",{parentName:"li"},"smithy4s.Document"),", a bespoke Json ADT)")),(0,i.kt)("h3",{id:"named-primitives"},"Named primitives"),(0,i.kt)("p",null,"Smithy lets you define custom names for primitive types:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"namespace foo\n\ninteger Age\nlong Identifier\n")),(0,i.kt)("p",null,"These get translated as unboxed type wrappers, or ",(0,i.kt)("inlineCode",{parentName:"p"},"newtypes"),", that look like a case class but do not induce any boxing at runtime."),(0,i.kt)("h3",{id:"collection-types"},"Collection types"),(0,i.kt)("p",null,"Smithy provides 3 different shapes of collections: lists, sets, and maps. They translate to the corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"scala.collection")," types in the generated Scala code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"namespace foo\n\nlist IntList {\n  member: Integer\n}\n\nset StringSet {\n  member: Set\n}\n\n// At this time, only string shapes can be used as keys to map.\nmap AgeMap {\n  key: String\n  value: Integer\n}\n")),(0,i.kt)("h3",{id:"enums"},"Enums"),(0,i.kt)("p",null,"Smithy supports two types of enums, for string and integers :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'enum FooBar {\n  FOO = "foo"\n  BAR = "bar"\n}\n\nintEnum FaceCard {\n    JACK = 1\n    QUEEN = 2\n    KING = 3\n    ACE = 4\n    JOKER = 5\n}\n')),(0,i.kt)("h3",{id:"structures"},"Structures"),(0,i.kt)("p",null,"Structures are product types. In Scala, they naturally translate to case classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"namespace foo\n\nstructure Person {\n  @required\n  firstName: String\n  @required\n  lastName: String\n  dateOfBirth: Timestamp\n}\n")),(0,i.kt)("h3",{id:"unions"},"Unions"),(0,i.kt)("p",null,"Unions are coproduct types. In Scala, they quite naturally translate to sealed traits."),(0,i.kt)("p",null,"Union members can target any data shape, be it a structure or a primitive type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"namespace foo\n\nstructure Cat {\n  name: String\n}\n\nstructure Dog {\n  name: String\n}\n\nunion Animal {\n  cat: Cat\n  dog: Dog\n}\n")),(0,i.kt)("h3",{id:"operations-and-services"},"Operations and services"),(0,i.kt)("h4",{id:"operations"},"Operations"),(0,i.kt)("p",null,"Operations are essentially an optional Input, an optional Output, and an optional list of errors. Inputs, outputs and errors all have to be structure shapes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace foo\n\noperation Greet {\n  input: GreetInput\n  output: GreetOutput\n  errors: [BadInput]\n}\n\nstructure GreetInput {\n  name: String\n}\n\nstructure GreetOutput {\n  message: String\n}\n\n@error("client")\nstructure BadInput {\n  message: String\n}\n')),(0,i.kt)("h4",{id:"errors"},"Errors"),(0,i.kt)("p",null,"Regarding errors, ",(0,i.kt)("inlineCode",{parentName:"p"},"smithy4s")," translates them as case classes extending ",(0,i.kt)("inlineCode",{parentName:"p"},"Throwable"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getMessage")," method of the throwable is implemented in terms of the following (based on the first match):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a field annotated with the ",(0,i.kt)("inlineCode",{parentName:"li"},"@errorMessage")," trait"),(0,i.kt)("li",{parentName:"ul"},"a field named ",(0,i.kt)("inlineCode",{parentName:"li"},"message"))),(0,i.kt)("h4",{id:"services"},"Services"),(0,i.kt)("p",null,"Services are basically a list of operations, and an optional list of errors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace foo\n\nservice HelloService {\n  operations: [Greet]\n  errors: [ServerError]\n}\n\n@error("server")\nstructure ServerError {\n  message: String\n}\n')),(0,i.kt)("p",null,"Smithy4s translates them in the following fashion:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"package object foo {\n\n  type HelloService[F[_]] = HelloServiceGen[???]\n\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"HelloService"),' is type alias that exposes a normal "functor-shaped" type parameter: we are aware that the most common usecase of Smithy4s abides by the "capatibility trait" pattern (or tagless-final), against effect types that probably abide by the cats-effect semantics.'),(0,i.kt)("p",null,"However, the actual interface is ",(0,i.kt)("inlineCode",{parentName:"p"},"HelloServiceGen"),", which has a higher degree of polymorphism. It looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"package foo\n\ntrait HelloServiceGen[P[_, _, _, _, _]]{\n\n  def greet(name: String) : P[GreetInput, Greet.Error, GreetOutput, Nothing, Nothing]\n\n}\n")),(0,i.kt)("p",null,"P represents an abstract context against which operations are going\nto run. The abstract context has 5 type parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"input"),(0,i.kt)("li",{parentName:"ul"},"error"),(0,i.kt)("li",{parentName:"ul"},"output"),(0,i.kt)("li",{parentName:"ul"},"streamed input (Nothing, most of the time)"),(0,i.kt)("li",{parentName:"ul"},"streamed output (Nothing, most of the time)")),(0,i.kt)("p",null,"Keeping track of these parameters is really important for the implementation  intepreters. It also opens the door for providing interpreters that work against bi-functors (",(0,i.kt)("inlineCode",{parentName:"p"},"EitherT[IO, *, *]"),") without changing the generated code."),(0,i.kt)("h3",{id:"currently-not-supported-in-particular"},"Currently ",(0,i.kt)("strong",{parentName:"h3"},"not")," supported (in particular)"),(0,i.kt)("p",null,"Smithy has a ",(0,i.kt)("inlineCode",{parentName:"p"},"resource")," type of shape, that represents CRUD specialised services. It is currently not supported in Smithy4s."))}d.isMDXComponent=!0}}]);