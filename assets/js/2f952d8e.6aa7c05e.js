"use strict";(self.webpackChunksmithy4s=self.webpackChunksmithy4s||[]).push([[206],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return h}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),u=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=u(t),h=o,f=m["".concat(c,".").concat(h)]||m[h]||p[h]||a;return t?n.createElement(f,i(i({ref:r},l),{},{components:t})):n.createElement(f,i({ref:r},l))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},336:function(e,r,t){t.r(r),t.d(r,{assets:function(){return l},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={sidebar_label:"Transformations and generalisation",title:"Transformations and generalisation"},c=void 0,u={unversionedId:"guides/transformations",id:"guides/transformations",title:"Transformations and generalisation",description:"It is often the case that users may want to manipulate the generated interfaces in a generic way, be that to transform the context in which the interface operates, or to apply some generic behaviour when running methods.",source:"@site/../docs/target/jvm-2.13/mdoc/06-guides/transformations.md",sourceDirName:"06-guides",slug:"/guides/transformations",permalink:"/smithy4s/docs/guides/transformations",draft:!1,editUrl:"https://github.com/disneystreaming/smithy4s/edit/main/modules/docs/src/06-guides/transformations.md",tags:[],version:"current",frontMatter:{sidebar_label:"Transformations and generalisation",title:"Transformations and generalisation"},sidebar:"tutorialSidebar",previous:{title:"Extracting Request Info",permalink:"/smithy4s/docs/guides/extract-request-info"},next:{title:"Credits",permalink:"/smithy4s/docs/credits"}},l={},p=[{value:"Error-related transformations",id:"error-related-transformations",level:2},{value:"Surfacing errors",id:"surfacing-errors",level:3},{value:"Absorbing errors",id:"absorbing-errors",level:3}],m={toc:p};function h(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It is often the case that users may want to manipulate the generated interfaces in a generic way, be that to transform the context in which the interface operates, or to apply some generic behaviour when running methods."),(0,a.kt)("p",null,"The generated code provided by Smithy4s contains the required methods and instances to be able to write transformations very generically. In particular, all generated service interfaces come with an associated ",(0,a.kt)("inlineCode",{parentName:"p"},"FunctorK5"),', which means they can be "mapped" by using a function that\noperates over higher-kinded types with 5 type parameters. Yes, this is scary, but indirections are present to make it easier for the end user.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'$version: "2"\n\nnamespace foo\n\nservice GreetService {\n  operations: [Greet]\n}\n\noperation Greet {\n  input := {\n    @required\n    name: String\n  }\n  output := {\n    @required\n    message: String\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s._\nimport smithy4s.kinds.PolyFunction\nimport foo._\n\ntype Result[A] = Either[String, A]\n\n// Assuming `GreetService` was generated by smithy4s.\nval greetServiceEither: GreetService[Result] = new GreetService[Result]{\n  def greet(name: String): Result[GreetOutput] =\n    if (name.isEmpty) Left("What\'s your name ?")\n    else Right(GreetOutput(s"Hello $name!"))\n}\n// greetServiceEither: GreetService[Result] = repl.MdocSession$MdocApp$$anon$1@672bb2cd\n\n// Creating a polymorphic function turning Either to Option :\nval toOption: PolyFunction[Result, Option] = new PolyFunction[Result, Option]{\n  def apply[A](result: Result[A]): Option[A] = result.toOption\n}\n// toOption: PolyFunction[Result, Option] = repl.MdocSession$MdocApp$$anon$2@39146397\n\n// transforming our service :\nval greetServiceOption: GreetService[Option] = greetServiceEither.transform(toOption)\n// greetServiceOption: GreetService[Option] = foo.GreetServiceGen$Transformed@26a34aee\n\nprintln(greetServiceOption.greet("John"))\n// Some(GreetOutput(Hello John!))\n')),(0,a.kt)("h2",{id:"error-related-transformations"},"Error-related transformations"),(0,a.kt)("p",null,"Using transformations, it is possible to surface errors into the context a service operates, or, in the contrary, to absorb errors to make them disappear from the context. The generated interfaces contain the accurate information associated to each method, and the companion objects contain the necessary constructs to transform typed-errors into throwables and to recover type-errors from throwables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'namespace smithy4s.example\n\nservice KVStore {\n  operations: [Get, Put, Delete],\n  errors: [UnauthorizedError]\n}\n\noperation Put {\n  input: KeyValue\n}\n\noperation Get {\n  input: Key,\n  output: Value,\n  errors: [KeyNotFoundError]\n}\n\noperation Delete {\n  input: Key,\n  errors: [KeyNotFoundError]\n}\n\nstructure Key {\n  @required\n  key: String\n}\n\nstructure KeyValue {\n  @required\n  key: String,\n  @required\n  value: String\n}\n\nstructure Value {\n  @required\n  value: String\n}\n\n@error("client")\nstructure UnauthorizedError {\n  @required\n  reason: String\n}\n\n@error("client")\nstructure KeyNotFoundError {\n  @required\n  message: String\n}\n')),(0,a.kt)("h3",{id:"surfacing-errors"},"Surfacing errors"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"smithy4s.Transformation.SurfaceError")," interface codifies the transformation of service implementations from contexts that represent errors as a generic ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable"),", from contexts that have the awareness of the errors specified in the specifications. It is useful when you want to exhaustively handle the errors that are specified (as opposed to letting them propagate)."),(0,a.kt)("p",null,"To make the ascription of such contexts easier, Smithy4s generates ",(0,a.kt)("inlineCode",{parentName:"p"},"ErrorAware[F[_, _]]"),' type aliases in the companion objects of services. This can\nbe used conjointly with types that have "two" parameters, one for the error, one for the result. For instance ',(0,a.kt)("inlineCode",{parentName:"p"},"type BIO[E, A] = EitherT[IO, E, A]"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example._\nimport smithy4s.example.KVStore\nimport smithy4s.Transformation\nimport scala.util.{Failure, Success, Try}\n\nobject kvStoreTry extends KVStore[Try] {\n  def delete(key: String): Try[Unit] = Success(())\n  def put(key: String, value: String): Try[Unit] = Success(())\n  def get(key: String): Failure[Value] = Failure(KeyNotFoundError(s"Key $key wasn\'t found"))\n}\n\n// SurfaceError allows to go from mono-functor to bi-functor, for instance, from\n// IO[A] to EitherT[IO, E, A]\nval toEither: Transformation.SurfaceError[Try, Either] =\n  new Transformation.SurfaceError[Try, Either] {\n    def apply[E, A](\n        value: Try[A],\n        catcher: Throwable => Option[E]\n    ): Either[E, A] = value match {\n      case Success(value) => Right(value)\n      case Failure(error) =>\n        catcher(error) match {\n          case None    => throw error // don\'t do this at work!\n          case Some(e) => Left(e)\n        }\n    }\n  }\n// toEither: Transformation.SurfaceError[Try, Either] = repl.MdocSession$MdocApp$$anon$3@1148003\n\nval kvStoreEither: KVStore.ErrorAware[Either] = kvStoreTry.transform(toEither)\n// kvStoreEither: KVStore.ErrorAware[Either] = smithy4s.example.KVStoreGen$Transformed@2fa0bccc\nval result: Either[KVStore.GetError, Value] = kvStoreEither.get("foo")\n// result: Either[KVStore.GetError, Value] = Left(\n//   value = KeyNotFoundErrorCase(\n//     keyNotFoundError = KeyNotFoundError(message = "Key foo wasn\'t found")\n//   )\n// )\n')),(0,a.kt)("h3",{id:"absorbing-errors"},"Absorbing errors"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"smithy4s.Transformation.AbsorbErrors")," interface is the opposite as the ",(0,a.kt)("inlineCode",{parentName:"p"},"SurfaceError"),": it codifies the absorption of errors known by the service into generic error channels."),(0,a.kt)("p",null,"It is useful to implement services in a way that leverages the type-checker to ensure that the returned errors have been specified in Smithy,\nbefore passing the implementation to a generic router that is only able to work against a monofunctor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import smithy4s.example._\nimport smithy4s.example.KVStore\nimport smithy4s.Transformation\nimport scala.util.{Failure, Success, Try}\n\nobject kvStoreEither extends KVStore.ErrorAware[Either] {\n  def delete(key: String): Either[KVStore.DeleteError, Unit] = Right(())\n  def put(key: String, value: String): Either[Nothing, Unit] = Right(())\n  def get(key: String): Either[KVStore.GetError, Value] =\n    Left(\n      KVStore.GetError.KeyNotFoundErrorCase(\n        KeyNotFoundError(s"Key $key wasn\'t found")\n      )\n    )\n}\n\nval toTry: Transformation.AbsorbError[Either, Try] =\n  new Transformation.AbsorbError[Either, Try] {\n    def apply[E, A](\n        value: Either[E, A],\n        thrower: E => Throwable\n    ): Try[A] = value match {\n      case Left(error)  => Failure(thrower(error))\n      case Right(value) => Success(value)\n    }\n  }\n// toTry: Transformation.AbsorbError[Either, Try] = repl.MdocSession$MdocApp3$$anon$4@68ce073b\n\nval kvStoreTry: KVStore[Try] = kvStoreEither.transform(toTry)\n// kvStoreTry: KVStore[Try] = smithy4s.example.KVStoreGen$Transformed@6af3ed02\nval result: Try[Value] = kvStoreTry.get("foo")\n// result: Try[Value] = Failure(\n//   exception = KeyNotFoundError(message = "Key foo wasn\'t found")\n// )\n')))}h.isMDXComponent=!0}}]);